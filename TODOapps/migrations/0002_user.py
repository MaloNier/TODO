# Generated by Django 2.2.2 on 2019-07-15 21:14

import TODOapps.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('TODOapps', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email_address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('username', models.CharField(blank=True, max_length=100, verbose_name='user name')),
                ('is_prime', models.BooleanField(default=False, help_text='実名登録による制限解除を行うかどうかを指定します。', verbose_name='prime')),
                ('is_staff', models.BooleanField(default=False, help_text='ユーザーが管理者画面にログイン出来るかを指定します。', verbose_name='staff_status')),
                ('is_active', models.BooleanField(default=True, help_text='このユーザーをアクティブとして扱うべきかどうかを指定します。アカウントを削除する代わりにこの選択を解除してください。', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='data joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', TODOapps.models.UserManager()),
            ],
        ),
    ]
